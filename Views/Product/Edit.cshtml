@model MahindraCrud.Models.Product
@{
    ViewBag.Title = "Edit Product";
}
<h2>Edit Product</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(m => m.Id)

    <div>
        @Html.LabelFor(m => m.Name)
        @Html.TextBoxFor(m => m.Name)
    </div>

    <div>
        @Html.LabelFor(m => m.State)
        @Html.DropDownListFor(m => m.State, new SelectList(new[] { "Maharashtra", "Gujarat" }, Model.State), "Select State", new { @id = "state" })
    </div>

    <div>
        @Html.LabelFor(m => m.District)
        @Html.DropDownListFor(m => m.District, new SelectList(new[] { Model.District }), "Select District", new { @id = "district" })
    </div>


    <div>
        @Html.LabelFor(m => m.Gender)
        @Html.DropDownListFor(m => m.Gender, new SelectList(new[] { "Male", "Female", "Other" }))
    </div>

    <div>
        @Html.LabelFor(m => m.ImagePath)
        @Html.TextBoxFor(m => m.ImagePath)
    </div>

    <div>
        @Html.LabelFor(m => m.Date)
        @Html.TextBoxFor(m => m.Date, "{0:yyyy-MM-dd}", new { type = "date" })
    </div>

    <div>
        @Html.LabelFor(m => m.Email)
        @Html.TextBoxFor(m => m.Email)
    </div>

    <div>
        @Html.LabelFor(m => m.Mobile)
        @Html.TextBoxFor(m => m.Mobile)
        @Html.ValidationMessageFor(m => m.Mobile)
    </div>


    <input type="submit" value="Update" />
}

@@section Scripts {
<script>
        const districtOptions = {
            "Maharashtra": ["Nashik", "Pune", "Mumbai"],
            "Gujarat": ["Ahmedabad", "Surat", "Vadodara"]
        };

        function populateDistricts(state, selectedDistrict = "") {
            const districtDropdown = document.getElementById("district");
            districtDropdown.innerHTML = '<option>Select District</option>';
            if (districtOptions[state]) {
                districtOptions[state].forEach(d => {
                    const option = document.createElement("option");
                    option.text = d;
                    option.value = d;
                    if (d === selectedDistrict) option.selected = true;
                    districtDropdown.add(option);
                });
            }
        }

        document.getElementById("state").addEventListener("change", function () {
            populateDistricts(this.value);
        });

        // On page load, populate based on existing value
        const selectedState = document.getElementById("state").value;
        const selectedDistrict = "@Model.District";
        if (selectedState) populateDistricts(selectedState, selectedDistrict);
</script>
}
